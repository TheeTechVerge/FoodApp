{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _SwipeRow = _interopRequireDefault(require(\"./SwipeRow\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Lab\\\\ReactNative\\\\FoodApp\\\\FoodFinderApp\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeListView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar SwipeListView = function (_PureComponent) {\n  (0, _inherits2.default)(SwipeListView, _PureComponent);\n\n  var _super = _createSuper(SwipeListView);\n\n  function SwipeListView(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SwipeListView);\n    _this = _super.call(this, props);\n\n    _this._renderItem = function (rowData) {\n      return _this.renderItem(rowData, _this._rows);\n    };\n\n    _this._onRef = function (c) {\n      return _this.setRefs(c);\n    };\n\n    _this._rows = {};\n    _this.openCellKey = null;\n    _this.listViewProps = {};\n\n    if (_reactNative.Platform.OS === 'ios') {\n      _this.yScrollOffset = 0;\n      _this.layoutHeight = 0;\n      _this.listViewProps = {\n        onLayout: function onLayout(e) {\n          return _this.onLayout(e);\n        },\n        onContentSizeChange: function onContentSizeChange(w, h) {\n          return _this.onContentSizeChange(w, h);\n        }\n      };\n    }\n\n    _this._onScroll = _this.onScroll.bind((0, _assertThisInitialized2.default)(_this));\n\n    if (_this.props.onScroll && typeof _this.props.onScroll === 'object') {\n      _this.props.onScroll.__addListener(_this._onScroll);\n\n      _this._onScroll = _this.props.onScroll;\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(SwipeListView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.refreshing) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      if (this.props.scrollEnabled === false) {\n        return;\n      }\n\n      if (this._listView && this._listView.setNativeProps) {\n        this._listView.setNativeProps({\n          scrollEnabled: enable\n        });\n      } else if (this._listView && this._listView.getScrollResponder) {\n        var scrollResponder = this._listView.getScrollResponder();\n\n        scrollResponder.setNativeProps && scrollResponder.setNativeProps({\n          scrollEnabled: enable\n        });\n      }\n\n      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      var rowRef = this._rows[this.openCellKey];\n\n      if (rowRef && rowRef.closeRow) {\n        this._rows[this.openCellKey].closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(key) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {\n        this.safeCloseOpenRow();\n      }\n\n      if (this.props.swipeGestureBegan) {\n        this.props.swipeGestureBegan(key);\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureEnded\",\n    value: function rowSwipeGestureEnded(key, data) {\n      if (this.props.swipeGestureEnded) {\n        this.props.swipeGestureEnded(key, data);\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(key, toValue) {\n      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {\n        this.safeCloseOpenRow();\n      }\n\n      this.openCellKey = key;\n      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.openCellKey) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (_reactNative.Platform.OS === 'ios') {\n        this.yScrollOffset = e.nativeEvent.contentOffset.y;\n      }\n\n      if (this.openCellKey) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n\n      typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      this.layoutHeight = e.nativeEvent.layout.height;\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(w, h) {\n      var height = h - this.layoutHeight;\n\n      if (this.yScrollOffset >= height && height > 0) {\n        if (this._listView instanceof _reactNative.FlatList) {\n          this._listView && this._listView.scrollToEnd();\n        } else if (this._listView instanceof _reactNative.SectionList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        } else if (this._listView instanceof _reactNative.Animated.FlatList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        }\n      }\n\n      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n\n      if (typeof this.props.listViewRef === 'function') {\n        this.props.listViewRef && this.props.listViewRef(ref);\n      } else if (typeof this.props.listViewRef === 'object') {\n        if (Object.keys(this.props.listViewRef).includes('current')) {\n          this.props.listViewRef.current = ref;\n        }\n      }\n    }\n  }, {\n    key: \"closeAllOpenRows\",\n    value: function closeAllOpenRows() {\n      var _this2 = this;\n\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this2._rows[rowKey];\n\n        if (row) {\n          var rowTranslateX = Math.round(row.currentTranslateX || 0);\n\n          if (row.closeRow && rowTranslateX !== 0) {\n            row.closeRow();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"manuallyOpenAllRows\",\n    value: function manuallyOpenAllRows(toValue) {\n      var _this3 = this;\n\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this3._rows[rowKey];\n\n        if (row && row.manuallySwipeRow) {\n          row.manuallySwipeRow(toValue);\n        }\n      });\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n      var _this4 = this;\n\n      if (!HiddenComponent) {\n        return _react.default.cloneElement(VisibleComponent, _objectSpread(_objectSpread({}, VisibleComponent.props), {}, {\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress();\n          },\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          }\n        }));\n      } else {\n        return _react.default.createElement(_SwipeRow.default, {\n          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {\n            return _this4.props.onSwipeValueChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress(key);\n          },\n          leftActivationValue: item.leftActivationValue || this.props.leftActivationValue,\n          rightActivationValue: item.rightActivationValue || this.props.rightActivationValue,\n          leftActionValue: item.leftActionValue || this.props.leftActionValue || 0,\n          rightActionValue: item.rightActionValue || this.props.rightActionValue || 0,\n          initialLeftActionState: item.initialLeftActionState || this.props.initialLeftActionState,\n          initialRightActionState: item.initialRightActionState || this.props.initialRightActionState,\n          onLeftAction: function onLeftAction() {\n            return item.onLeftAction || _this4.props.onLeftAction && _this4.props.onLeftAction(key, _this4._rows);\n          },\n          onRightAction: function onRightAction() {\n            return item.onRightAction || _this4.props.onRightAction && _this4.props.onRightAction(key, _this4._rows);\n          },\n          onLeftActionStatusChange: this.props.onLeftActionStatusChange ? function (data) {\n            return _this4.props.onLeftActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          onRightActionStatusChange: this.props.onRightActionStatusChange ? function (data) {\n            return _this4.props.onRightActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {\n            return _this4.props.shouldItemUpdate(currentItem, newItem);\n          } : null,\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,\n          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,\n          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,\n          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,\n          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,\n          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,\n          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,\n          recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,\n          style: this.props.swipeRowStyle,\n          preview: shouldPreviewRow,\n          previewDuration: this.props.previewDuration,\n          previewOpenDelay: this.props.previewOpenDelay,\n          previewOpenValue: this.props.previewOpenValue,\n          previewRepeat: this.props.previewRepeat,\n          previewRepeatDelay: this.props.previewRepeatDelay,\n          tension: this.props.tension,\n          restSpeedThreshold: this.props.restSpeedThreshold,\n          restDisplacementThreshold: this.props.restDisplacementThreshold,\n          friction: this.props.friction,\n          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n          swipeToOpenPercent: this.props.swipeToOpenPercent,\n          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,\n          swipeToClosePercent: this.props.swipeToClosePercent,\n          item: item,\n          useNativeDriver: this.props.useNativeDriver,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }\n        }, HiddenComponent, VisibleComponent);\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var key = \"\" + secId + rowId;\n      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;\n      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(rowData, rowMap) {\n      var Component = this.props.renderItem(rowData, rowMap);\n      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);\n      var item = rowData.item,\n          index = rowData.index;\n      var key = item.key;\n\n      if (!key && this.props.keyExtractor) {\n        key = this.props.keyExtractor(item, index);\n      }\n\n      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;\n      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          useSectionList = _this$props.useSectionList,\n          renderListView = _this$props.renderListView,\n          props = (0, _objectWithoutProperties2.default)(_this$props, [\"useSectionList\", \"renderListView\"]);\n\n      if (renderListView) {\n        var useRenderRow = !!this.props.renderRow;\n        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));\n      }\n\n      if (useSectionList) {\n        var _ListComponent = this.props.useAnimatedList ? _reactNative.Animated.SectionList : _reactNative.SectionList;\n\n        return _react.default.createElement(_ListComponent, (0, _extends2.default)({}, props, this.listViewProps, {\n          ref: this._onRef,\n          onScroll: this._onScroll,\n          renderItem: this._renderItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      var ListComponent = this.props.useAnimatedList ? _reactNative.Animated.FlatList : _reactNative.FlatList;\n      return _react.default.createElement(ListComponent, (0, _extends2.default)({}, props, this.listViewProps, {\n        ref: this._onRef,\n        onScroll: this._onScroll,\n        renderItem: this._renderItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n  return SwipeListView;\n}(_react.PureComponent);\n\nSwipeListView.propTypes = {\n  renderListView: _propTypes.default.func,\n  renderItem: _propTypes.default.func,\n  renderHiddenItem: _propTypes.default.func,\n  leftOpenValue: _propTypes.default.number,\n  rightOpenValue: _propTypes.default.number,\n  leftActivationValue: _propTypes.default.number,\n  rightActivationValue: _propTypes.default.number,\n  leftActionValue: _propTypes.default.number,\n  rightActionValue: _propTypes.default.number,\n  initialLeftActionState: _propTypes.default.bool,\n  initialRightActionState: _propTypes.default.bool,\n  stopLeftSwipe: _propTypes.default.number,\n  stopRightSwipe: _propTypes.default.number,\n  closeOnScroll: _propTypes.default.bool,\n  closeOnRowPress: _propTypes.default.bool,\n  closeOnRowBeginSwipe: _propTypes.default.bool,\n  closeOnRowOpen: _propTypes.default.bool,\n  disableLeftSwipe: _propTypes.default.bool,\n  disableRightSwipe: _propTypes.default.bool,\n  recalculateHiddenLayout: _propTypes.default.bool,\n  disableHiddenLayoutCalculation: _propTypes.default.bool,\n  swipeGestureBegan: _propTypes.default.func,\n  swipeGestureEnded: _propTypes.default.func,\n  onRowOpen: _propTypes.default.func,\n  onRowDidOpen: _propTypes.default.func,\n  onRowClose: _propTypes.default.func,\n  onRowDidClose: _propTypes.default.func,\n  onLeftAction: _propTypes.default.func,\n  onRightAction: _propTypes.default.func,\n  onLeftActionStatusChange: _propTypes.default.func,\n  onRightActionStatusChange: _propTypes.default.func,\n  onScrollEnabled: _propTypes.default.func,\n  onScroll: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n  swipeRowStyle: _propTypes.default.object,\n  listViewRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n  previewRowKey: _propTypes.default.string,\n  previewFirstRow: _propTypes.default.bool,\n  previewRowIndex: _propTypes.default.number,\n  previewDuration: _propTypes.default.number,\n  previewRepeat: _propTypes.default.bool,\n  previewRepeatDelay: _propTypes.default.number,\n  previewOpenDelay: _propTypes.default.number,\n  previewOpenValue: _propTypes.default.number,\n  friction: _propTypes.default.number,\n  tension: _propTypes.default.number,\n  restSpeedThreshold: _propTypes.default.number,\n  restDisplacementThreshold: _propTypes.default.number,\n  directionalDistanceChangeThreshold: _propTypes.default.number,\n  swipeToOpenPercent: _propTypes.default.number,\n  swipeToOpenVelocityContribution: _propTypes.default.number,\n  swipeToClosePercent: _propTypes.default.number,\n  shouldItemUpdate: _propTypes.default.func,\n  onSwipeValueChange: _propTypes.default.func,\n  useNativeDriver: _propTypes.default.bool,\n  useAnimatedList: _propTypes.default.bool,\n  keyExtractor: _propTypes.default.func\n};\nSwipeListView.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  closeOnRowOpen: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000,\n  useAnimatedList: false\n};\nvar _default = SwipeListView;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Lab/ReactNative/FoodApp/FoodFinderApp/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"names":["SwipeListView","props","_renderItem","rowData","renderItem","_rows","_onRef","c","setRefs","openCellKey","listViewProps","Platform","OS","yScrollOffset","layoutHeight","onLayout","e","onContentSizeChange","w","h","_onScroll","onScroll","bind","__addListener","refreshing","safeCloseOpenRow","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","key","closeOnRowBeginSwipe","swipeGestureBegan","data","swipeGestureEnded","toValue","closeOnRowOpen","onRowOpen","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","FlatList","scrollToEnd","SectionList","Animated","ref","listViewRef","Object","keys","includes","current","forEach","rowKey","row","rowTranslateX","Math","round","currentTranslateX","manuallySwipeRow","VisibleComponent","HiddenComponent","item","shouldPreviewRow","React","cloneElement","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","rowSwipeGestureBegan","_","rowSwipeGestureEnded","onSwipeValueChange","leftActivationValue","rightActivationValue","leftActionValue","rightActionValue","initialLeftActionState","initialRightActionState","onLeftAction","onRightAction","onLeftActionStatusChange","onRightActionStatusChange","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","swipeRowStyle","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","secId","rowId","rowMap","Component","renderRow","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderCell","renderHiddenItem","index","keyExtractor","previewRowKey","useSectionList","renderListView","useRenderRow","ListComponent","useAnimatedList","PureComponent","propTypes","PropTypes","func","number","bool","oneOfType","object","string","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, FlatList, Platform, SectionList } from 'react-native';\n\nimport SwipeRow from './SwipeRow';\n\n/**\n * ListView that renders SwipeRows.\n */\nclass SwipeListView extends PureComponent {\n    constructor(props) {\n        super(props);\n        this._rows = {};\n        this.openCellKey = null;\n        this.listViewProps = {};\n        if (Platform.OS === 'ios') {\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\n            this.yScrollOffset = 0;\n            this.layoutHeight = 0;\n            this.listViewProps = {\n                onLayout: e => this.onLayout(e),\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\n            };\n        }\n        this._onScroll = this.onScroll.bind(this);\n        if (this.props.onScroll && typeof this.props.onScroll === 'object') {\n            // Animated.event\n            this.props.onScroll.__addListener(this._onScroll);\n            this._onScroll = this.props.onScroll;\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.refreshing) {\n            this.safeCloseOpenRow();\n        }\n    }\n\n    setScrollEnabled(enable) {\n        if (this.props.scrollEnabled === false) {\n            return;\n        }\n        // Due to multiple issues reported across different versions of RN\n        // We do this in the safest way possible...\n        if (this._listView && this._listView.setNativeProps) {\n            this._listView.setNativeProps({ scrollEnabled: enable });\n        } else if (this._listView && this._listView.getScrollResponder) {\n            const scrollResponder = this._listView.getScrollResponder();\n            scrollResponder.setNativeProps &&\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\n        }\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n\n    safeCloseOpenRow() {\n        const rowRef = this._rows[this.openCellKey];\n        if (rowRef && rowRef.closeRow) {\n            this._rows[this.openCellKey].closeRow();\n        }\n    }\n\n    rowSwipeGestureBegan(key) {\n        if (\n            this.props.closeOnRowBeginSwipe &&\n            this.openCellKey &&\n            this.openCellKey !== key\n        ) {\n            this.safeCloseOpenRow();\n        }\n\n        if (this.props.swipeGestureBegan) {\n            this.props.swipeGestureBegan(key);\n        }\n    }\n\n    rowSwipeGestureEnded(key, data) {\n        if (this.props.swipeGestureEnded) {\n            this.props.swipeGestureEnded(key, data);\n        }\n    }\n\n    onRowOpen(key, toValue) {\n        if (\n            this.openCellKey &&\n            this.openCellKey !== key &&\n            this.props.closeOnRowOpen &&\n            !this.props.closeOnRowBeginSwipe\n        ) {\n            this.safeCloseOpenRow();\n        }\n        this.openCellKey = key;\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n\n    onRowPress() {\n        if (this.openCellKey) {\n            if (this.props.closeOnRowPress) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n    }\n\n    onScroll(e) {\n        if (Platform.OS === 'ios') {\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\n        }\n        if (this.openCellKey) {\n            if (this.props.closeOnScroll) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n        typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n\n    onLayout(e) {\n        this.layoutHeight = e.nativeEvent.layout.height;\n        this.props.onLayout && this.props.onLayout(e);\n    }\n\n    // When deleting rows on iOS, the list may end up being over-scrolled,\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\n    // when that happens, which will make sure the list is kept in bounds.\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\n    onContentSizeChange(w, h) {\n        const height = h - this.layoutHeight;\n        if (this.yScrollOffset >= height && height > 0) {\n            if (this._listView instanceof FlatList) {\n                this._listView && this._listView.scrollToEnd();\n            } else if (this._listView instanceof SectionList) {\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\n            } else if (this._listView instanceof Animated.FlatList) {\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\n            }\n        }\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n\n    setRefs(ref) {\n        this._listView = ref;\n        if (typeof this.props.listViewRef === 'function') {\n            this.props.listViewRef && this.props.listViewRef(ref);\n        } else if (typeof this.props.listViewRef === 'object') {\n            if (Object.keys(this.props.listViewRef).includes('current')) {\n                this.props.listViewRef.current = ref;\n            }\n        }\n    }\n\n    closeAllOpenRows() {\n        Object.keys(this._rows).forEach(rowKey => {\n            const row = this._rows[rowKey];\n            if (row) {\n                const rowTranslateX = Math.round(row.currentTranslateX || 0);\n                if (row.closeRow && rowTranslateX !== 0) {\n                    row.closeRow();\n                }\n            }\n        });\n    }\n\n    manuallyOpenAllRows(toValue) {\n        Object.keys(this._rows).forEach(rowKey => {\n            const row = this._rows[rowKey];\n            if (row && row.manuallySwipeRow) {\n                row.manuallySwipeRow(toValue);\n            }\n        });\n    }\n\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n        if (!HiddenComponent) {\n            return React.cloneElement(VisibleComponent, {\n                ...VisibleComponent.props,\n                ref: row => (this._rows[key] = row),\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\n                onRowDidOpen: toValue =>\n                    this.props.onRowDidOpen &&\n                    this.props.onRowDidOpen(key, this._rows, toValue),\n                onRowClose: () =>\n                    this.props.onRowClose &&\n                    this.props.onRowClose(key, this._rows),\n                onRowDidClose: () =>\n                    this.props.onRowDidClose &&\n                    this.props.onRowDidClose(key, this._rows),\n                onRowPress: () => this.onRowPress(),\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\n                swipeGestureEnded: (_, data) =>\n                    this.rowSwipeGestureEnded(key, data),\n            });\n        } else {\n            return (\n                <SwipeRow\n                    onSwipeValueChange={\n                        this.props.onSwipeValueChange\n                            ? data =>\n                                  this.props.onSwipeValueChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    ref={row => (this._rows[key] = row)}\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\n                    swipeGestureEnded={(_, data) =>\n                        this.rowSwipeGestureEnded(key, data)\n                    }\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\n                    onRowDidOpen={toValue =>\n                        this.props.onRowDidOpen &&\n                        this.props.onRowDidOpen(key, this._rows, toValue)\n                    }\n                    onRowClose={() =>\n                        this.props.onRowClose &&\n                        this.props.onRowClose(key, this._rows)\n                    }\n                    onRowDidClose={() =>\n                        this.props.onRowDidClose &&\n                        this.props.onRowDidClose(key, this._rows)\n                    }\n                    onRowPress={() => this.onRowPress(key)}\n                    leftActivationValue={\n                        item.leftActivationValue ||\n                        this.props.leftActivationValue\n                    }\n                    rightActivationValue={\n                        item.rightActivationValue ||\n                        this.props.rightActivationValue\n                    }\n                    leftActionValue={\n                        item.leftActionValue || this.props.leftActionValue || 0\n                    }\n                    rightActionValue={\n                        item.rightActionValue || this.props.rightActionValue || 0\n                    }\n                    initialLeftActionState={\n                        item.initialLeftActionState ||\n                        this.props.initialLeftActionState\n                    }\n                    initialRightActionState={\n                        item.initialRightActionState ||\n                        this.props.initialRightActionState\n                    }\n                    onLeftAction={() =>\n                        item.onLeftAction ||\n                        (this.props.onLeftAction &&\n                            this.props.onLeftAction(key, this._rows))\n                    }\n                    onRightAction={() =>\n                        item.onRightAction ||\n                        (this.props.onRightAction &&\n                            this.props.onRightAction(key, this._rows))\n                    }\n                    onLeftActionStatusChange={\n                        this.props.onLeftActionStatusChange\n                            ? data =>\n                                  this.props.onLeftActionStatusChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    onRightActionStatusChange={\n                        this.props.onRightActionStatusChange\n                            ? data =>\n                                  this.props.onRightActionStatusChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    shouldItemUpdate={\n                        this.props.shouldItemUpdate\n                            ? (currentItem, newItem) =>\n                                  this.props.shouldItemUpdate(\n                                      currentItem,\n                                      newItem\n                                  )\n                            : null\n                    }\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\n                    leftOpenValue={\n                        item.leftOpenValue || this.props.leftOpenValue\n                    }\n                    rightOpenValue={\n                        item.rightOpenValue || this.props.rightOpenValue\n                    }\n                    closeOnRowPress={\n                        item.closeOnRowPress || this.props.closeOnRowPress\n                    }\n                    disableLeftSwipe={\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\n                    }\n                    disableRightSwipe={\n                        item.disableRightSwipe || this.props.disableRightSwipe\n                    }\n                    stopLeftSwipe={\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\n                    }\n                    stopRightSwipe={\n                        item.stopRightSwipe || this.props.stopRightSwipe\n                    }\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n                    disableHiddenLayoutCalculation={\n                        this.props.disableHiddenLayoutCalculation\n                    }\n                    style={this.props.swipeRowStyle}\n                    preview={shouldPreviewRow}\n                    previewDuration={this.props.previewDuration}\n                    previewOpenDelay={this.props.previewOpenDelay}\n                    previewOpenValue={this.props.previewOpenValue}\n                    previewRepeat={this.props.previewRepeat}\n                    previewRepeatDelay={this.props.previewRepeatDelay}\n                    tension={this.props.tension}\n                    restSpeedThreshold={this.props.restSpeedThreshold}\n                    restDisplacementThreshold={\n                        this.props.restDisplacementThreshold\n                    }\n                    friction={this.props.friction}\n                    directionalDistanceChangeThreshold={\n                        this.props.directionalDistanceChangeThreshold\n                    }\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\n                    swipeToOpenVelocityContribution={\n                        this.props.swipeToOpenVelocityContribution\n                    }\n                    swipeToClosePercent={this.props.swipeToClosePercent}\n                    item={item} // used for should item update comparisons\n                    useNativeDriver={this.props.useNativeDriver}\n                >\n                    {HiddenComponent}\n                    {VisibleComponent}\n                </SwipeRow>\n            );\n        }\n    }\n\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\n    renderRow(rowData, secId, rowId, rowMap) {\n        const key = `${secId}${rowId}`;\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenRow &&\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n        const previewRowId =\n            this.props.dataSource &&\n            this.props.dataSource.getRowIDForFlatIndex(\n                this.props.previewRowIndex || 0\n            );\n        const shouldPreviewRow =\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\n            rowId === previewRowId;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            rowData,\n            shouldPreviewRow\n        );\n    }\n\n    renderItem(rowData, rowMap) {\n        const Component = this.props.renderItem(rowData, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenItem &&\n            this.props.renderHiddenItem(rowData, rowMap);\n        const { item, index } = rowData;\n        let { key } = item;\n        if (!key && this.props.keyExtractor) {\n            key = this.props.keyExtractor(item, index);\n        }\n\n        const shouldPreviewRow =\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            item,\n            shouldPreviewRow\n        );\n    }\n\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\n\n    _onRef = c => this.setRefs(c);\n\n    render() {\n        const { useSectionList, renderListView, ...props } = this.props;\n\n        if (renderListView) {\n            // Ideally renderRow should be deprecated. We do this check for\n            // legacy purposes to not break certain renderListView cases\n            const useRenderRow = !!this.props.renderRow;\n            return renderListView(\n                props,\n                this.setRefs.bind(this),\n                this.onScroll.bind(this),\n                useRenderRow\n                    ? this.renderRow.bind(this, this._rows)\n                    : this.renderItem.bind(this)\n            );\n        }\n\n        if (useSectionList) {\n            const ListComponent = this.props.useAnimatedList\n                ? Animated.SectionList\n                : SectionList;\n            return (\n                <ListComponent\n                    {...props}\n                    {...this.listViewProps}\n                    ref={this._onRef}\n                    onScroll={this._onScroll}\n                    renderItem={this._renderItem}\n                />\n            );\n        }\n        const ListComponent = this.props.useAnimatedList\n            ? Animated.FlatList\n            : FlatList;\n        return (\n            <ListComponent\n                {...props}\n                {...this.listViewProps}\n                ref={this._onRef}\n                onScroll={this._onScroll}\n                renderItem={this._renderItem}\n            />\n        );\n    }\n}\n\nSwipeListView.propTypes = {\n    /**\n     * To render a custom ListView component, if you don't want to use ReactNative one.\n     * Note: This will call `renderRow`, not `renderItem`\n     */\n    renderListView: PropTypes.func,\n    /**\n     * How to render a row in a FlatList. Should return a valid React Element.\n     */\n    renderItem: PropTypes.func,\n    /**\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\n     * This is required unless renderItem is passing a SwipeRow.\n     */\n    renderHiddenItem: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\n     */\n    leftActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onRightActionStatusChange (negative number)\n     */\n    rightActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for left action to which the row will be shifted after gesture release\n     */\n    leftActionValue: PropTypes.number,\n    /**\n     * TranslateX value for right action to which the row will be shifted after gesture release\n     */\n    rightActionValue: PropTypes.number,\n    /**\n     * Initial value for left action state (default is false)\n     */\n    initialLeftActionState: PropTypes.bool,\n    /**\n     * Initial value for right action state (default is false)\n     */\n    initialRightActionState: PropTypes.bool,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Should open rows be closed when the listView begins scrolling\n     */\n    closeOnScroll: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row is pressed\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row begins to swipe open\n     */\n    closeOnRowBeginSwipe: PropTypes.bool,\n    /**\n     * Should open rows be closed when another row is opened\n     */\n    closeOnRowOpen: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always.\n     *\n     * By default, hidden row size calculations are only done on the first onLayout event\n     * for performance reasons.\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\n     * You may want to do this if your rows' sizes can change.\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     *\n     * Instead, {width: '100%', height: '100%'} will be used.\n     * Improves performance by avoiding component updates, while still working with orientation changes.\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating swipe\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when user has ended their swipe gesture\n     */\n    swipeGestureEnded: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Called when row shifted to leftActivationValue\n     */\n    onLeftAction: PropTypes.func,\n    /**\n     * Called when row shifted to rightActivationValue\n     */\n    onRightAction: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the leftActivationValue\n     */\n    onLeftActionStatusChange: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the rightActivationValue\n     */\n    onRightActionStatusChange: PropTypes.func,\n    /**\n     * Called when scrolling on the SwipeListView has been enabled/disabled\n     */\n    onScrollEnabled: PropTypes.func,\n    /**\n     * Called when a scroll event is emitted\n     */\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    swipeRowStyle: PropTypes.object,\n    /**\n     * Called when the FlatList ref is set and passes a ref to the FlatList\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\n     */\n    listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Should the row with this key do a slide out preview to show that the list is swipeable\n     */\n    previewRowKey: PropTypes.string,\n    /**\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\n     */\n    previewFirstRow: PropTypes.bool,\n    /**\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\n     * Note: This ID will be passed to this function to get the correct row index\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\n     */\n    previewRowIndex: PropTypes.number,\n    /**\n     * Duration of the slide out preview animation (milliseconds)\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\n     */\n    previewOpenDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of a SwipeRow is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n    /**\n     * Use Animated.Flatlist or Animated.Sectionlist\n     */\n    useAnimatedList: PropTypes.bool,\n    /**\n     * keyExtractor: function to generate key value for each row in the list\n     */\n    keyExtractor: PropTypes.func,\n};\n\nSwipeListView.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    closeOnRowOpen: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n    useAnimatedList: false,\n};\n\nexport default SwipeListView;\n"]},"metadata":{},"sourceType":"script"}