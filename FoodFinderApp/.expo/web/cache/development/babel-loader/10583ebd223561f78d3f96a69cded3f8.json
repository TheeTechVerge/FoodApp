{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = MaterialBottomTabView;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar MaterialCommunityIcons;\n\ntry {\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e) {\n  var _global$__expo, _global$__expo$Icon;\n\n  if ((_global$__expo = global.__expo) === null || _global$__expo === void 0 ? void 0 : (_global$__expo$Icon = _global$__expo.Icon) === null || _global$__expo$Icon === void 0 ? void 0 : _global$__expo$Icon.MaterialCommunityIcons) {\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    var isErrorLogged = false;\n\n    MaterialCommunityIcons = function MaterialCommunityIcons() {\n      if (!isErrorLogged) {\n        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n          console.error(e);\n        }\n\n        console.warn(\"Tried to use the icon '\".concat(name, \"' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons' could not be loaded.\"), \"To remove this warning, try installing 'react-native-vector-icons' or use another method.\");\n        isErrorLogged = true;\n      }\n\n      return null;\n    };\n  }\n}\n\nfunction MaterialBottomTabViewInner(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"state\", \"navigation\", \"descriptors\"]);\n\n  var _useTheme = (0, _native.useTheme)(),\n      dark = _useTheme.dark,\n      colors = _useTheme.colors;\n\n  var buildLink = (0, _native.useLinkBuilder)();\n  var theme = React.useMemo(function () {\n    var t = dark ? _reactNativePaper.DarkTheme : _reactNativePaper.DefaultTheme;\n    return _objectSpread(_objectSpread({}, t), {}, {\n      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), colors), {}, {\n        surface: colors.card\n      })\n    });\n  }, [colors, dark]);\n  return React.createElement(_reactNativePaper.BottomNavigation, _extends({}, rest, {\n    theme: theme,\n    navigationState: state,\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, _native.TabActions.jumpTo(state.routes[index].name)), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    renderTouchable: _reactNative.Platform.OS === 'web' ? function (_ref3) {\n      var _onPress = _ref3.onPress,\n          route = _ref3.route,\n          _0 = _ref3.accessibilityRole,\n          _1 = _ref3.borderless,\n          _2 = _ref3.centered,\n          _3 = _ref3.rippleColor,\n          style = _ref3.style,\n          rest = (0, _objectWithoutProperties2.default)(_ref3, [\"onPress\", \"route\", \"accessibilityRole\", \"borderless\", \"centered\", \"rippleColor\", \"style\"]);\n      return React.createElement(_native.Link, _extends({}, rest, {\n        to: buildLink(route.name, route.params),\n        accessibilityRole: \"link\",\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n              e.preventDefault();\n              _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n            }\n        },\n        style: [styles.touchable, style]\n      }));\n    } : undefined,\n    renderIcon: function renderIcon(_ref4) {\n      var route = _ref4.route,\n          focused = _ref4.focused,\n          color = _ref4.color;\n      var options = descriptors[route.key].options;\n\n      if (typeof options.tabBarIcon === 'string') {\n        return React.createElement(MaterialCommunityIcons, {\n          name: options.tabBarIcon,\n          color: color,\n          size: 24,\n          style: styles.icon\n        });\n      }\n\n      if (typeof options.tabBarIcon === 'function') {\n        return options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n      }\n\n      return null;\n    },\n    getLabelText: function getLabelText(_ref5) {\n      var route = _ref5.route;\n      var options = descriptors[route.key].options;\n      return options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    },\n    getColor: function getColor(_ref6) {\n      var route = _ref6.route;\n      return descriptors[route.key].options.tabBarColor;\n    },\n    getBadge: function getBadge(_ref7) {\n      var route = _ref7.route;\n      return descriptors[route.key].options.tabBarBadge;\n    },\n    getAccessibilityLabel: function getAccessibilityLabel(_ref8) {\n      var route = _ref8.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref9) {\n      var route = _ref9.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref10) {\n      var route = _ref10.route,\n          preventDefault = _ref10.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    }\n  }));\n}\n\nfunction MaterialBottomTabView(props) {\n  return React.createElement(_native.NavigationHelpersContext.Provider, {\n    value: props.navigation\n  }, React.createElement(MaterialBottomTabViewInner, props));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["MaterialCommunityIcons","require","global","isErrorLogged","e","console","rest","colors","buildLink","theme","t","dark","surface","card","index","TabActions","state","target","key","route","descriptors","accessibilityRole","borderless","centered","rippleColor","onPress","styles","color","options","icon","focused","preventDefault","event","type","canPreventDefault","props","navigation","backgroundColor","touchable","display","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport {\n  NavigationHelpersContext,\n  Route,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n  useLinkBuilder,\n  Link,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport type {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\n// Optionally require vector-icons referenced from react-native-paper:\n// https://github.com/callstack/react-native-paper/blob/4b26429c49053eaa4c3e0fae208639e01093fa87/src/components/MaterialCommunityIcon.tsx#L14\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  // @ts-expect-error\n  if (global.__expo?.Icon?.MaterialCommunityIcons) {\n    // Snack doesn't properly bundle vector icons from sub-path\n    // Use icons from the __expo global if available\n    // @ts-expect-error\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    let isErrorLogged = false;\n\n    // Fallback component for icons\n    MaterialCommunityIcons = () => {\n      if (!isErrorLogged) {\n        if (\n          !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n            e.message\n          )\n        ) {\n          console.error(e);\n        }\n\n        console.warn(\n          `Tried to use the icon '${name}' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons' could not be loaded.`,\n          `To remove this warning, try installing 'react-native-vector-icons' or use another method.`\n        );\n\n        isErrorLogged = true;\n      }\n\n      return null;\n    };\n  }\n}\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const { dark, colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              style,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-expect-error: to could be undefined, but it doesn't affect functionality\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                  style={[styles.touchable, style]}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={props.navigation}>\n      <MaterialBottomTabViewInner {...props} />\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}