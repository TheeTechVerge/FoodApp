{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar interpolateDeprecated = _reactNativeReanimated.default.interpolate,\n    interpolateNode = _reactNativeReanimated.default.interpolateNode,\n    cond = _reactNativeReanimated.default.cond,\n    greaterThan = _reactNativeReanimated.default.greaterThan;\nvar interpolate = interpolateNode !== null && interpolateNode !== void 0 ? interpolateNode : interpolateDeprecated;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n      style = _ref.style,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"progress\", \"style\"]);\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'macos' ? [0, 1] : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(_reactNativeReanimated.default.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style]\n  }));\n});\n\nvar overlayStyle = _reactNative.Platform.select({\n  web: {\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  overlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  })\n});\n\nvar _default = Overlay;\nexports.default = _default;","map":{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","greaterThan","interpolateNode","PROGRESS_EPSILON","Overlay","props","animatedStyle","opacity","inputRange","Platform","outputRange","zIndex","cond","styles","overlayStyle","web","WebkitTapHighlightColor","default","overlay","StyleSheet","backgroundColor"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAEM,qB,GAAN,8B,CACEA,W;IADI,e,GAAN,8B,CAAM,e;IAAA,I,GAAN,8B,CAAM,I;IAKJC,W,GALF,8B,CAKEA,W;AAGF,IAAMD,WAAyC,GAC7CE,eAD6C,KAAA,IAC7CA,IAAAA,eAD6C,KAAA,KAAA,CAC7CA,GAD6C,eAC7CA,GADF,qBAAA;AAGA,IAAMC,gBAAgB,GAAtB,IAAA;AAMA,IAAMC,OAAO,GAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,OAAA,OAAA,GAAA,EAG/B;AAAA,MAFA,QAEA,QAFA,QAEA;AAAA,MAFA,KAEA,QAFA,KAEA;AAAA,MAFsBC,KAEtB;AACA,MAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEP,WAAW,CAAA,QAAA,EAAW;AAK7BQ,MAAAA,UAAU,EACRC,sBAAAA,EAAAA,KAAAA,SAAAA,IAA6BA,sBAAAA,EAAAA,KAA7BA,OAAAA,GACI,CAAA,CAAA,EADJA,CACI,CADJA,GAEI,CAAA,gBAAA,EARuB,CAQvB,CARuB;AAS7BC,MAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;AATgB,KAAX,CADA;AAepBC,IAAAA,MAAM,EAAEC,IAAI,CAACX,WAAW,CAAA,QAAA,EAAZ,gBAAY,CAAZ,EAAA,CAAA,EAA6C,CAA7C,CAAA;AAfQ,GAAtB;AAkBA,SACE,KAAA,CAAA,aAAA,CAAA,+BAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,KAAK,EAAE,CAACY,MAAM,CAAP,OAAA,EAAA,YAAA,EAAA,aAAA,EAAA,KAAA;AAHT,GAAA,CAAA,CADF;AAtBF,CAAgB,CAAhB;;AA+BA,IAAMC,YAAY,GAAG,sBAAA,MAAA,CAAwC;AAC3DC,EAAAA,GAAG,EAAE;AAGHC,IAAAA,uBAAuB,EAAE;AAHtB,GADsD;AAM3DC,EAAAA,OAAO,EAAE;AANkD,CAAxC,CAArB;;AASA,IAAMJ,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BK,EAAAA,OAAO,kCACFC,wBADI,kBAAF;AAELC,IAAAA,eAAe,EAAE;AAFZ;AADwB,CAAlB,CAAf;;eAOA,O","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-expect-error: this property is only present in Reanimated 2\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    />\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"script"}