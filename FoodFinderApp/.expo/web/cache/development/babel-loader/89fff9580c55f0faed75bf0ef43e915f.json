{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _decorateMapComponent = _interopRequireWildcard(require(\"./decorateMapComponent\"));\n\nvar _MapView = _interopRequireDefault(require(\"./MapView\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Lab\\\\ReactNative\\\\FoodApp\\\\FoodFinderApp\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapPolygon.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  coordinates: _propTypes.default.arrayOf(_propTypes.default.shape({\n    latitude: _propTypes.default.number.isRequired,\n    longitude: _propTypes.default.number.isRequired\n  })),\n  holes: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.shape({\n    latitude: _propTypes.default.number.isRequired,\n    longitude: _propTypes.default.number.isRequired\n  }))),\n  onPress: _propTypes.default.func,\n  tappable: _propTypes.default.bool,\n  strokeWidth: _propTypes.default.number,\n  strokeColor: _reactNative.ColorPropType,\n  fillColor: _reactNative.ColorPropType,\n  zIndex: _propTypes.default.number,\n  lineCap: _propTypes.default.oneOf(['butt', 'round', 'square']),\n  lineJoin: _propTypes.default.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: _propTypes.default.number,\n  geodesic: _propTypes.default.bool,\n  lineDashPhase: _propTypes.default.number,\n  lineDashPattern: _propTypes.default.arrayOf(_propTypes.default.number)\n});\n\nvar defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1\n};\n\nvar MapPolygon = function (_React$Component) {\n  (0, _inherits2.default)(MapPolygon, _React$Component);\n\n  var _super = _createSuper(MapPolygon);\n\n  function MapPolygon() {\n    (0, _classCallCheck2.default)(this, MapPolygon);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(MapPolygon, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.polygon.setNativeProps(props);\n    }\n  }, {\n    key: \"updateNativeProps\",\n    value: function updateNativeProps() {\n      var _this = this;\n\n      return function () {\n        var _this$props = _this.props,\n            fillColor = _this$props.fillColor,\n            strokeColor = _this$props.strokeColor,\n            strokeWidth = _this$props.strokeWidth;\n        var polygonNativeProps = {};\n\n        if (fillColor) {\n          polygonNativeProps.fillColor = fillColor;\n        }\n\n        if (strokeColor) {\n          polygonNativeProps.strokeColor = strokeColor;\n        }\n\n        if (strokeWidth) {\n          polygonNativeProps.strokeWidth = strokeWidth;\n        }\n\n        if (polygonNativeProps) {\n          _this.setNativeProps(polygonNativeProps);\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var AIRMapPolygon = this.getAirComponent();\n      return _react.default.createElement(AIRMapPolygon, (0, _extends2.default)({}, this.props, {\n        ref: function ref(_ref) {\n          _this2.polygon = _ref;\n        },\n        onLayout: this.context.provider === _MapView.default.PROVIDER_GOOGLE ? this.updateNativeProps() : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n  return MapPolygon;\n}(_react.default.Component);\n\nMapPolygon.propTypes = propTypes;\nMapPolygon.defaultProps = defaultProps;\n\nvar _default = (0, _decorateMapComponent.default)(MapPolygon, {\n  componentType: 'Polygon',\n  providers: {\n    google: {\n      ios: _decorateMapComponent.SUPPORTED,\n      android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Lab/ReactNative/FoodApp/FoodFinderApp/node_modules/react-native-maps/lib/components/MapPolygon.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","coordinates","PropTypes","arrayOf","shape","latitude","number","isRequired","longitude","holes","onPress","func","tappable","bool","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolygon","props","polygon","setNativeProps","polygonNativeProps","AIRMapPolygon","getAirComponent","ref","context","provider","MapView","PROVIDER_GOOGLE","updateNativeProps","undefined","React","Component","componentType","providers","google","ios","SUPPORTED","android","USES_DEFAULT_IMPLEMENTATION"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\nimport MapView from './MapView';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n\n  /**\n   * An array of coordinates to describe the polygon\n   */\n  coordinates: PropTypes.arrayOf(\n    PropTypes.shape({\n      /**\n       * Latitude/Longitude coordinates\n       */\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n    })\n  ),\n\n  /**\n   * An array of array of coordinates to describe the polygon holes\n   */\n  holes: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Latitude/Longitude coordinates\n         */\n        latitude: PropTypes.number.isRequired,\n        longitude: PropTypes.number.isRequired,\n      })\n    )\n  ),\n\n  /**\n   * Callback that is called when the user presses on the polygon\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Boolean to allow a polygon to be tappable and use the\n   * onPress function\n   */\n  tappable: PropTypes.bool,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\n   * a sphere.\n   *\n   */\n  geodesic: PropTypes.bool,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapPolygon extends React.Component {\n  setNativeProps(props) {\n    this.polygon.setNativeProps(props);\n  }\n\n  updateNativeProps() {\n    return () => {\n      const { fillColor, strokeColor, strokeWidth } = this.props;\n      let polygonNativeProps = {};\n      if (fillColor) {\n        polygonNativeProps.fillColor = fillColor;\n      }\n      if (strokeColor) {\n        polygonNativeProps.strokeColor = strokeColor;\n      }\n      if (strokeWidth) {\n        polygonNativeProps.strokeWidth = strokeWidth;\n      }\n      if (polygonNativeProps) {\n        this.setNativeProps(polygonNativeProps);\n      }\n    };\n  }\n\n  render() {\n    const AIRMapPolygon = this.getAirComponent();\n    return (\n      <AIRMapPolygon\n        {...this.props}\n        ref={ref => {\n          this.polygon = ref;\n        }}\n        onLayout={\n          this.context.provider === MapView.PROVIDER_GOOGLE\n            ? this.updateNativeProps()\n            : undefined\n        }\n      />\n    );\n  }\n}\n\nMapPolygon.propTypes = propTypes;\nMapPolygon.defaultProps = defaultProps;\n\nexport default decorateMapComponent(MapPolygon, {\n  componentType: 'Polygon',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"script"}