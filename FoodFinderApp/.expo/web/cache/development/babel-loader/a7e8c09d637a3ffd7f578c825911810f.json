{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioButtonAndroid = exports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\n\nvar _utils = require(\"./utils\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  (0, _inherits2.default)(RadioButtonAndroid, _React$Component);\n\n  var _super = _createSuper(RadioButtonAndroid);\n\n  function RadioButtonAndroid() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      borderAnim: new _reactNative.Animated.Value(BORDER_WIDTH),\n      radioAnim: new _reactNative.Animated.Value(1)\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n\n        _reactNative.Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150 * scale,\n          useNativeDriver: false\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n\n        _reactNative.Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150 * scale,\n          useNativeDriver: false\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          value = _this$props.value,\n          status = _this$props.status,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\"]);\n\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, radioColor;\n      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {\n        var checked = (0, _utils.isChecked)({\n          contextValue: context === null || context === void 0 ? void 0 : context.value,\n          status: status,\n          value: value\n        }) === 'checked';\n\n        if (disabled) {\n          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            (0, _utils.handlePress)({\n              onPress: onPress,\n              onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n              value: value\n            });\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : [],\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container\n        }), React.createElement(_reactNative.Animated.View, {\n          style: [styles.radio, {\n            borderColor: radioColor,\n            borderWidth: _this2.state.borderAnim\n          }]\n        }, checked ? React.createElement(_reactNative.View, {\n          style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer]\n        }, React.createElement(_reactNative.Animated.View, {\n          style: [styles.dot, {\n            backgroundColor: radioColor,\n            transform: [{\n              scale: _this2.state.radioAnim\n            }]\n          }]\n        })) : null));\n      });\n    }\n  }]);\n  return RadioButtonAndroid;\n}(React.Component);\n\nexports.RadioButtonAndroid = RadioButtonAndroid;\n\n_defineProperty(RadioButtonAndroid, \"displayName\", 'RadioButton.Android');\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\n\nvar _default = (0, _theming.withTheme)(RadioButtonAndroid);\n\nexports.default = _default;","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","React","borderAnim","Animated","radioAnim","prevProps","scale","toValue","duration","useNativeDriver","status","checkedColor","theme","uncheckedColor","color","context","checked","contextValue","value","rippleColor","radioColor","disabled","handlePress","onPress","onValueChange","styles","container","borderColor","borderWidth","StyleSheet","backgroundColor","transform","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n    const { scale } = this.props.theme.animation;\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"script"}