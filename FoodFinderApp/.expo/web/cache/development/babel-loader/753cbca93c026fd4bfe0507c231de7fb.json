{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TextInputOutlined = _interopRequireDefault(require(\"./TextInputOutlined\"));\n\nvar _TextInputFlat = _interopRequireDefault(require(\"./TextInputFlat\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\n\nvar TextInput = function (_React$Component) {\n  (0, _inherits2.default)(TextInput, _React$Component);\n\n  var _super = _createSuper(TextInput);\n\n  function TextInput() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TextInput);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      labeled: new _reactNative.Animated.Value((_this.props.value !== undefined ? _this.props.value : _this.props.defaultValue) ? 0 : 1),\n      error: new _reactNative.Animated.Value(_this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue,\n      labelLayout: {\n        measured: false,\n        width: 0,\n        height: 0\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"ref\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"showPlaceholder\", function () {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n      }\n\n      _this.timer = setTimeout(function () {\n        return _this.setState({\n          placeholder: _this.props.placeholder\n        });\n      }, 50);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"hidePlaceholder\", function () {\n      return _this.setState({\n        placeholder: ''\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"timer\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"root\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"showError\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: _reactNative.Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start(_this.showPlaceholder);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"hideError\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: _reactNative.Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"restoreLabel\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: _reactNative.Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"minimizeLabel\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: _reactNative.Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleFocus\", function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(args);\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleBlur\", function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(args);\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleChangeText\", function (value) {\n      if (!_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        value: value\n      });\n\n      _this.props.onChangeText && _this.props.onChangeText(value);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleLayoutAnimatedText\", function (e) {\n      _this.setState({\n        labelLayout: {\n          width: e.nativeEvent.layout.width,\n          height: e.nativeEvent.layout.height,\n          measured: true\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TextInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.focused !== this.state.focused || prevState.value !== this.state.value || prevState.labelLayout !== this.state.labelLayout) {\n        if (this.state.value || this.state.focused) {\n          this.minimizeLabel();\n        } else {\n          this.restoreLabel();\n        }\n      }\n\n      if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label) {\n        if (this.state.focused || !this.props.label) {\n          this.showPlaceholder();\n        } else {\n          this.hidePlaceholder();\n        }\n      }\n\n      if (prevProps.error !== this.props.error) {\n        if (this.props.error) {\n          this.showError();\n        } else {\n          this.hideError();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _ref = this.props,\n          mode = _ref.mode,\n          rest = _objectWithoutProperties(_ref, [\"mode\"]);\n\n      return mode === 'outlined' ? React.createElement(_TextInputOutlined.default, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText\n      })) : React.createElement(_TextInputFlat.default, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return {\n        value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n      };\n    }\n  }]);\n  return TextInput;\n}(React.Component);\n\n_defineProperty(TextInput, \"defaultProps\", {\n  mode: 'flat',\n  dense: false,\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(_reactNative.TextInput, props);\n  }\n});\n\nvar _default = (0, _theming.withTheme)(TextInput);\n\nexports.default = _default;","map":{"version":3,"sources":["TextInput.tsx"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","mode","dense","disabled","error","multiline","editable","render","props","value","nextProps","prevState","labeled","Animated","focused","placeholder","labelLayout","measured","width","height","prevProps","clearTimeout","setTimeout","scale","toValue","duration","useNativeDriver","ios","default","args","e","ref","handleLayoutAnimatedText","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\n\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport { withTheme } from '../../core/theming';\nimport { RenderProps, State } from './types';\nimport { Theme, $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n\n  state = {\n    labeled: new Animated.Value(\n      (this.props.value !== undefined\n      ? this.props.value\n      : this.props.defaultValue)\n        ? 0\n        : 1\n    ),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value:\n      this.props.value !== undefined\n        ? this.props.value\n        : this.props.defaultValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    if (\n      prevState.focused !== this.state.focused ||\n      prevState.value !== this.state.value ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      prevState.labelLayout !== this.state.labelLayout\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (\n      prevState.focused !== this.state.focused ||\n      prevProps.label !== this.props.label\n    ) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (prevProps.error !== this.props.error) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    // @ts-ignore\n    this.timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: number;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this.showPlaceholder);\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"script"}