{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _ListAccordionGroup = require(\"./ListAccordionGroup\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ListAccordion = function (_React$Component) {\n  (0, _inherits2.default)(ListAccordion, _React$Component);\n\n  var _super = _createSuper(ListAccordion);\n\n  function ListAccordion() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      expanded: _this.props.expanded || false\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlePress\", function () {\n      _this.props.onPress && _this.props.onPress();\n\n      if (_this.props.expanded === undefined) {\n        _this.setState(function (state) {\n          return {\n            expanded: !state.expanded\n          };\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          titleStyle = _this$props.titleStyle,\n          descriptionStyle = _this$props.descriptionStyle,\n          titleNumberOfLines = _this$props.titleNumberOfLines,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines,\n          style = _this$props.style,\n          id = _this$props.id,\n          testID = _this$props.testID;\n      var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n      var expandedInternal = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n      return React.createElement(_ListAccordionGroup.ListAccordionGroupContext.Consumer, null, function (groupContext) {\n        if (groupContext !== null && !id) {\n          throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n        }\n\n        var expanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n        var handlePress = groupContext && id !== undefined ? function () {\n          return groupContext.onAccordionPress(id);\n        } : _this2.handlePress;\n        return React.createElement(_reactNative.View, null, React.createElement(_TouchableRipple.default, {\n          style: [styles.container, style],\n          onPress: handlePress,\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          testID: testID\n        }, React.createElement(_reactNative.View, {\n          style: styles.row,\n          pointerEvents: \"none\"\n        }, left ? left({\n          color: expanded ? theme.colors.primary : descriptionColor\n        }) : null, React.createElement(_reactNative.View, {\n          style: [styles.item, styles.content]\n        }, React.createElement(_Text.default, {\n          numberOfLines: titleNumberOfLines,\n          style: [styles.title, {\n            color: expanded ? theme.colors.primary : titleColor\n          }, titleStyle]\n        }, title), description && React.createElement(_Text.default, {\n          numberOfLines: descriptionNumberOfLines,\n          style: [styles.description, {\n            color: descriptionColor\n          }, descriptionStyle]\n        }, description)), React.createElement(_reactNative.View, {\n          style: [styles.item, description ? styles.multiline : undefined]\n        }, React.createElement(_MaterialCommunityIcon.default, {\n          name: expanded ? 'chevron-up' : 'chevron-down',\n          color: titleColor,\n          size: 24,\n          direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n        })))), expanded ? React.Children.map(children, function (child) {\n          if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n            return React.cloneElement(child, {\n              style: [styles.child, child.props.style]\n            });\n          }\n\n          return child;\n        }) : null);\n      });\n    }\n  }]);\n  return ListAccordion;\n}(React.Component);\n\n_defineProperty(ListAccordion, \"displayName\", 'List.Accordion');\n\n_defineProperty(ListAccordion, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ListAccordion);\n\nexports.default = _default;","map":{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","React","titleNumberOfLines","descriptionNumberOfLines","expanded","state","testID","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","handlePress","id","styles","left","description","I18nManager","child","style","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n      testID,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n                testID={testID}\n              >\n                <View style={styles.row} pointerEvents=\"none\">\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    <Text\n                      numberOfLines={titleNumberOfLines}\n                      style={[\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ]}\n                    >\n                      {title}\n                    </Text>\n                    {description && (\n                      <Text\n                        numberOfLines={descriptionNumberOfLines}\n                        style={[\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ]}\n                      >\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <View\n                    style={[\n                      styles.item,\n                      description ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <MaterialCommunityIcon\n                      name={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                      direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, child => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"script"}