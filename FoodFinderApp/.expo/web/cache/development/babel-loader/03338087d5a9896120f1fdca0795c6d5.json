{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interpolatePlaceholder = exports.adjustPaddingFlat = exports.adjustPaddingOut = exports.calculatePadding = exports.calculateInputHeight = exports.calculateLabelTopPosition = void 0;\n\nvar calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexports.calculateLabelTopPosition = calculateLabelTopPosition;\n\nvar calculateInputHeight = function calculateInputHeight(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  var finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexports.calculateInputHeight = calculateInputHeight;\n\nvar calculatePadding = function calculatePadding(props) {\n  var height = props.height,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline;\n  var result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nexports.calculatePadding = calculatePadding;\n\nvar calculateTextAreaPadding = function calculateTextAreaPadding(props) {\n  var dense = props.dense;\n  return dense ? 10 : 20;\n};\n\nvar calculateInputPadding = function calculateInputPadding(_ref) {\n  var topPosition = _ref.topPosition,\n      fontSize = _ref.fontSize,\n      multiline = _ref.multiline,\n      scale = _ref.scale,\n      dense = _ref.dense,\n      offset = _ref.offset,\n      isAndroid = _ref.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nvar adjustPaddingOut = function adjustPaddingOut(_ref2) {\n  var pad = _ref2.pad,\n      multiline = _ref2.multiline,\n      label = _ref2.label,\n      scale = _ref2.scale,\n      height = _ref2.height,\n      fontSize = _ref2.fontSize,\n      dense = _ref2.dense,\n      offset = _ref2.offset,\n      isAndroid = _ref2.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = pad;\n\n  if (height) {\n    return {\n      paddingTop: Math.max(0, (height - fontSize) / 2),\n      paddingBottom: Math.max(0, (height - fontSize) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontSize / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontSize * scale) : Math.min(offset / 2, refFontSize * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\n\nexports.adjustPaddingOut = adjustPaddingOut;\n\nvar adjustPaddingFlat = function adjustPaddingFlat(_ref3) {\n  var pad = _ref3.pad,\n      scale = _ref3.scale,\n      multiline = _ref3.multiline,\n      label = _ref3.label,\n      height = _ref3.height,\n      offset = _ref3.offset,\n      dense = _ref3.dense,\n      fontSize = _ref3.fontSize,\n      isAndroid = _ref3.isAndroid,\n      styles = _ref3.styles;\n  var result = pad;\n  var topResult = result;\n  var bottomResult = result;\n  var paddingTop = styles.paddingTop,\n      paddingBottom = styles.paddingBottom;\n  var refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom\n      };\n    }\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\n\nexports.adjustPaddingFlat = adjustPaddingFlat;\n\nvar interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {\n  return labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1]\n  });\n};\n\nexports.interpolatePlaceholder = interpolatePlaceholder;","map":{"version":3,"sources":["helpers.tsx"],"names":["calculateLabelTopPosition","height","optionalPadding","customHeight","Math","calculateInputHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","dense","isAndroid","refFontSize","scale","topPosition","offset","adjustPaddingOut","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","fontSize","interpolatePlaceholder","inputRange","outputRange","hasActiveOutline"],"mappings":"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","sourcesContent":["import { Animated } from 'react-native';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  label?: string | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const refFontSize = scale * fontSize;\n  let result = pad;\n\n  if (height) {\n    return {\n      paddingTop: Math.max(0, (height - fontSize) / 2),\n      paddingBottom: Math.max(0, (height - fontSize) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontSize / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontSize * scale)\n            : Math.min(offset / 2, refFontSize * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n"]},"metadata":{},"sourceType":"script"}